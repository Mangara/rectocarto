/*
 * Copyright 2010-2016 Sander Verdonschot <sander.verdonschot at gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rectangularcartogram.gui;

import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import rectangularcartogram.algos.RELExtracter;
import rectangularcartogram.data.RegularEdgeLabeling;
import rectangularcartogram.data.graph.Edge;
import rectangularcartogram.data.subdivision.Subdivision;
import rectangularcartogram.data.subdivision.SubdivisionFace;
import rectangularcartogram.ipe.IPEExporter;
import rectangularcartogram.measures.AngleDeviationMeasure;
import rectangularcartogram.measures.BoundingBoxSeparationMeasure;
import rectangularcartogram.measures.QualityMeasure.Fold;
import rectangularcartogram.measures.ResultingAngleDeviationMeasure;

public class ResultExplorer extends javax.swing.JFrame {

    private JFileChooser openFileChooser;
    private JFileChooser exportFileChooser;
    private String mySubExtension = "sub";
    private FileNameExtensionFilter mySubFilter = new FileNameExtensionFilter("Subdivisions", mySubExtension);
    private String ipeExtension = "ipe";
    private FileNameExtensionFilter ipeFilter = new FileNameExtensionFilter("IPE Subdivisions", ipeExtension);
    private List<Subdivision> subdivisions = new ArrayList<Subdivision>();
    private SubdivisionDrawPanel subDrawPanel;
    private Subdivision map = null;
    private AngleDeviationMeasure ad;
    private BoundingBoxSeparationMeasure bbsd;
    private ResultingAngleDeviationMeasure rad;
    private FilterResultsDialog filterDialog;
    private IPEExporter ipeExporter = new IPEExporter();

    /** Creates new form ResultExplorer */
    public ResultExplorer() {
        initComponents();

        filterDialog = new FilterResultsDialog(this, false);

        subDrawPanel = new SubdivisionDrawPanel();
        subDrawPanel.setDrawDualGraph(false);
        bottomPanel.add(subDrawPanel, BorderLayout.CENTER);

        openFileChooser = new JFileChooser(System.getProperty("user.dir"));
        openFileChooser.addChoosableFileFilter(mySubFilter);
        openFileChooser.setFileFilter(mySubFilter);

        exportFileChooser = new JFileChooser(System.getProperty("user.dir"));
        exportFileChooser.addChoosableFileFilter(ipeFilter);
        exportFileChooser.addChoosableFileFilter(mySubFilter);
        exportFileChooser.setFileFilter(ipeFilter);

        resultsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    // Selection has settled
                    int selectedRow = resultsTable.getSelectedRow();

                    if (selectedRow > -1) {
                        // Get the id in that row
                        Integer id = (Integer) resultsTable.getValueAt(selectedRow, 0);

                        if (id != null) {
                            subDrawPanel.setSubdivision(subdivisions.get(id));
                            subDrawPanel.repaint();
                        }
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainSplitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        bottomPanel = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        loadButton = new javax.swing.JButton();
        computeButton = new javax.swing.JButton();
        filterButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        resultsTable.setAutoCreateRowSorter(true);
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Measure", "ACE", "MCE", "AD", "BBSD", "RAD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(resultsTable);
        resultsTable.getColumnModel().getColumn(0).setMinWidth(1);
        resultsTable.getColumnModel().getColumn(0).setPreferredWidth(1);
        resultsTable.getColumnModel().getColumn(2).setPreferredWidth(2);
        resultsTable.getColumnModel().getColumn(3).setPreferredWidth(2);
        resultsTable.getColumnModel().getColumn(4).setPreferredWidth(2);
        resultsTable.getColumnModel().getColumn(5).setPreferredWidth(2);
        resultsTable.getColumnModel().getColumn(6).setPreferredWidth(2);

        mainSplitPane.setTopComponent(jScrollPane1);

        bottomPanel.setLayout(new java.awt.BorderLayout());
        mainSplitPane.setBottomComponent(bottomPanel);

        getContentPane().add(mainSplitPane, java.awt.BorderLayout.CENTER);

        loadButton.setText("Load Results...");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        computeButton.setText("Update recognizability...");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });

        filterButton.setText("Filter Results...");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        exportButton.setText("Export Selected...");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(computeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportButton)
                .addContainerGap(218, Short.MAX_VALUE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(computeButton)
                    .addComponent(filterButton)
                    .addComponent(jButton1)
                    .addComponent(exportButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        openFileChooser.setMultiSelectionEnabled(true);
        int opened = openFileChooser.showOpenDialog(this);

        if (opened == JFileChooser.APPROVE_OPTION) {
            // Clear the table
            subdivisions = new ArrayList<Subdivision>();
            ((DefaultTableModel) resultsTable.getModel()).setRowCount(0);

            try {
                DefaultTableModel m = (DefaultTableModel) resultsTable.getModel();

                for (File f : openFileChooser.getSelectedFiles()) {
                    if (f.isFile() && mySubFilter.accept(f)) {
                        Subdivision sub = loadSubdivision(f);

                        if (sub != null) {
                            // Add it to the list
                            int id = subdivisions.size();
                            subdivisions.add(sub);

                            if (map != null) {
                                // Compute recognizability values
                                // TODO
                            }

                            // Get the measure from the name, if possible
                            String measure = "";

                            String[] parts = f.getName().split(" ");

                            for (int i = 2; i < parts.length; i++) {
                                measure += parts[i] + " ";
                            }

                            // Add it to the table
                            m.addRow(new Object[]{id, measure, sub.getAverageCartographicError(), sub.getMaximumCartographicError(), 0, 0, 0});
                        }
                    }
                }
            } catch (IOException ioe) {
                // Nice error
                ioe.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "An error occurred while loading the data:\n"
                        + ioe.getMessage(),
                        "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
        // Choose a map
        openFileChooser.setMultiSelectionEnabled(false);
        int opened = openFileChooser.showOpenDialog(this);
        boolean loaded = false;

        if (opened == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = openFileChooser.getSelectedFile();

                boolean isSubdivision = openFileChooser.getFileFilter() == mySubFilter || selectedFile.getName().contains("." + mySubExtension);

                if (isSubdivision) {
                    map = loadSubdivision(selectedFile);

                    ad = new AngleDeviationMeasure(map, Fold.AVERAGE_SQUARED, true, true);
                    bbsd = new BoundingBoxSeparationMeasure(map, Fold.AVERAGE_SQUARED, true, true);
                    rad = new ResultingAngleDeviationMeasure(map, null, Fold.AVERAGE_SQUARED, 10, true, true);

                    loaded = true;
                } else {
                    throw new IOException("Original map must be given as subdivision.");
                }
            } catch (IOException ioe) {
                // Nice error
                ioe.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "An error occurred while loading the data:\n"
                        + ioe.getMessage(),
                        "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }

        if (loaded) {
            for (int i = 0; i < subdivisions.size(); i++) {
                Integer subIndex = (Integer) resultsTable.getValueAt(i, 0);

                if (subIndex != null) {
                    Subdivision sub = subdivisions.get(subIndex);

                    // Compute its REL
                    RegularEdgeLabeling rel = RELExtracter.findRegularEdgeLabeling(sub);

                    // Compute the mappings
                    Map<SubdivisionFace, SubdivisionFace> faceMap = computeFaceMapping(map, sub);
                    Map<Edge, Edge> edgeMap = computeEdgeMapping(map, sub, faceMap);

                    // Compute the recognizability values
                    double adv = ad.getQuality(rel, edgeMap);
                    double bbsdv = bbsd.getQuality(rel, edgeMap);
                    double radv = rad.getCartogramQuality(sub, faceMap);

                    resultsTable.setValueAt(adv, i, 4);
                    resultsTable.setValueAt(bbsdv, i, 5);
                    resultsTable.setValueAt(radv, i, 6);
                }
            }
        }
    }//GEN-LAST:event_computeButtonActionPerformed

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        filterDialog.setVisible(true);
    }//GEN-LAST:event_filterButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        subdivisions = new ArrayList<Subdivision>();
        ((DefaultTableModel) resultsTable.getModel()).setRowCount(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        Subdivision sub = null;

        int selectedRow = resultsTable.getSelectedRow();

        if (selectedRow > -1) {
            // Get the id in that row
            Integer id = (Integer) resultsTable.getValueAt(selectedRow, 0);

            if (id != null) {
                sub = subdivisions.get(id);
            }
        }

        if (sub == null) {
            JOptionPane.showMessageDialog(this,
                    "An error occurred while exporting the data:\n"
                    + "No cartogram selected!",
                    "Error!", JOptionPane.ERROR_MESSAGE);
        } else {
            int saved = exportFileChooser.showSaveDialog(this);

            if (saved == JFileChooser.APPROVE_OPTION) {
                try {
                    File selectedFile = exportFileChooser.getSelectedFile();

                    // Add an extension if that wasn't done already
                    if (exportFileChooser.getFileFilter() == ipeFilter) {
                        if (!selectedFile.getName().contains("." + ipeExtension)) {
                            selectedFile = new File(selectedFile.getParent(), selectedFile.getName() + "." + ipeExtension);
                        }

                        ipeExporter.exportIPEFile(selectedFile, sub, false);
                    } else if (exportFileChooser.getFileFilter() == mySubFilter) {
                        if (!selectedFile.getName().contains("." + mySubExtension)) {
                            selectedFile = new File(selectedFile.getParent(), selectedFile.getName() + "." + mySubExtension);
                        }

                        saveSubdivision(sub, selectedFile);
                    } else {
                        // Default to saving as subdivision
                        if (!selectedFile.getName().contains(".")) {
                            selectedFile = new File(selectedFile.getParent(), selectedFile.getName() + "." + mySubExtension);
                        }

                        saveSubdivision(sub, selectedFile);
                    }
                } catch (IOException ioe) {
                    // Nice error
                    ioe.printStackTrace();
                    JOptionPane.showMessageDialog(this,
                            "An error occurred while exporting the data:\n"
                            + ioe.getMessage(),
                            "Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private Subdivision loadSubdivision(File file) throws IOException {
        BufferedReader in = null;

        try {
            in = new BufferedReader(new FileReader(file));

            return Subdivision.load(in);
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }

    private void saveSubdivision(Subdivision sub, File file) throws IOException {
        BufferedWriter out = null;

        try {
            out = new BufferedWriter(new FileWriter(file));

            // Write the data
            sub.save(out);
        } finally {
            if (out != null) {
                out.close();
            }
        }
    }

    public DefaultTableModel getTableData() {
        return (DefaultTableModel) resultsTable.getModel();
    }

    public void removeSubdivision(int index) {
        subdivisions.set(index, null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ResultExplorer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton computeButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton filterButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JTable resultsTable;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

    private Map<SubdivisionFace, SubdivisionFace> computeFaceMapping(Subdivision map, Subdivision sub) {
        HashMap<SubdivisionFace, SubdivisionFace> faceMap = new HashMap<SubdivisionFace, SubdivisionFace>(2 * map.getFaces().size());

        for (SubdivisionFace f1 : map.getFaces()) {
            if (!f1.isSea() && f1.getName() != null && !f1.getName().isEmpty()) {
                for (SubdivisionFace f2 : sub.getFaces()) {
                    if (f1.getName().equals(f2.getName())) {
                        faceMap.put(f1, f2);
                        break;
                    }
                }
            }
        }

        return faceMap;
    }

    private Map<Edge, Edge> computeEdgeMapping(Subdivision map, Subdivision sub, Map<SubdivisionFace, SubdivisionFace> faceMap) {
        HashMap<Edge, Edge> edgeMap = new HashMap<Edge, Edge>(2 * map.getDualGraph().getEdges().size());

        for (Edge e1 : map.getDualGraph().getEdges()) {
            SubdivisionFace f1a = map.getFace(e1.getVA());
            SubdivisionFace f1b = map.getFace(e1.getVB());

            if (faceMap.containsKey(f1a) && faceMap.containsKey(f1b)) {
                SubdivisionFace f2a = faceMap.get(f1a);
                SubdivisionFace f2b = faceMap.get(f1b);

                for (Edge e2 : sub.getDualGraph().getEdges()) {
                    SubdivisionFace fa = sub.getFace(e2.getVA());
                    SubdivisionFace fb = sub.getFace(e2.getVB());

                    if ((fa == f2a && fb == f2b) || (fa == f2b && fb == f2a)) {
                        edgeMap.put(e1, e2);
                    }
                }
            }
        }

        return edgeMap;
    }
}
