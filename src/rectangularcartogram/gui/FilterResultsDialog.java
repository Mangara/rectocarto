/*
 * Copyright 2010-2016 Sander Verdonschot <sander.verdonschot at gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package rectangularcartogram.gui;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class FilterResultsDialog extends javax.swing.JDialog {

    private ResultExplorer parent;

    /** Creates new form FilterResultsDialog */
    public FilterResultsDialog(ResultExplorer parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionButtonGroup = new javax.swing.ButtonGroup();
        attributeComboBox = new javax.swing.JComboBox();
        comparisonComboBox = new javax.swing.JComboBox();
        valueTextField = new javax.swing.JTextField();
        keepRadioButton = new javax.swing.JRadioButton();
        removeRadioButton = new javax.swing.JRadioButton();
        actionLabel = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        attributeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ACE", "MCE", "AD", "BBSD", "RAD" }));

        comparisonComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<", ">", "<=", ">=", "=" }));

        actionButtonGroup.add(keepRadioButton);
        keepRadioButton.setSelected(true);
        keepRadioButton.setText("Keep it");

        actionButtonGroup.add(removeRadioButton);
        removeRadioButton.setText("Remove it");

        actionLabel.setText("If something matches the filter:");

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(attributeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comparisonComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(actionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keepRadioButton)
                            .addComponent(removeRadioButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(filterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attributeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comparisonComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(actionLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keepRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeRadioButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        try {
            int columnId = getAttributeColumnId();
            int comparison = comparisonComboBox.getSelectedIndex();
            double value = Double.parseDouble(valueTextField.getText());
            boolean keepItems = keepRadioButton.isSelected();

            DefaultTableModel data = parent.getTableData();

            List<Integer> removeIds = new ArrayList<Integer>();
            List<Integer> removeRows = new ArrayList<Integer>();

            for (int i = 0; i < data.getRowCount(); i++) {
                double rowVal = (Double) data.getValueAt(i, columnId);

                switch (comparison) {
                    case 0:
                        if (rowVal < value) {
                            if (!keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        } else {
                            if (keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        }
                        break;
                    case 1:
                        if (rowVal > value) {
                            if (!keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        } else {
                            if (keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        }
                        break;
                    case 2:
                        if (rowVal <= value) {
                            if (!keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        } else {
                            if (keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        }
                        break;
                    case 3:
                        if (rowVal >= value) {
                            if (!keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        } else {
                            if (keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        }
                        break;
                    case 4:
                        if (rowVal == value) {
                            if (!keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        } else {
                            if (keepItems) {
                                removeIds.add((Integer) data.getValueAt(i, 0));
                                removeRows.add(i);
                            }
                        }
                        break;
                    default:
                        throw new UnsupportedOperationException("Unrecognized comparison: " + comparison);
                }
            }
            
            Collections.sort(removeRows, Collections.reverseOrder());

            for (Integer i : removeRows) {
                data.removeRow(i);
            }

            for (Integer i : removeIds) {
                parent.removeSubdivision(i);
            }

            System.out.println("Removed " + removeRows.size() + " rows.");

            dispose();
        } catch (Exception e) {
            // Nice error
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "An error occurred while filtering the results:\n"
                    + e.getMessage(),
                    "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_filterButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup actionButtonGroup;
    private javax.swing.JLabel actionLabel;
    private javax.swing.JComboBox attributeComboBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox comparisonComboBox;
    private javax.swing.JButton filterButton;
    private javax.swing.JRadioButton keepRadioButton;
    private javax.swing.JRadioButton removeRadioButton;
    private javax.swing.JTextField valueTextField;
    // End of variables declaration//GEN-END:variables

    private int getAttributeColumnId() {
        String attr = (String) attributeComboBox.getSelectedItem();

        if ("ACE".equals(attr)) {
            return 2;
        } else if ("MCE".equals(attr)) {
            return 3;
        } else if ("AD".equals(attr)) {
            return 4;
        } else if ("BBSD".equals(attr)) {
            return 5;
        } else if ("RAD".equals(attr)) {
            return 6;
        } else {
            throw new UnsupportedOperationException("Unrecognized filter attribute: " + attr);
        }
    }
}
